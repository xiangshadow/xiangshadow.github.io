<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&amp;ensp;&amp;emsp;静觅</title>
  
  <subtitle>翔的个人网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gaoxiangxiang.cn/"/>
  <updated>2018-09-16T09:19:54.016Z</updated>
  <id>http://www.gaoxiangxiang.cn/</id>
  
  <author>
    <name>翔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy搭建爬虫项目</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/13/scrapydajianxiangmu/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/13/scrapydajianxiangmu/</id>
    <published>2018-09-13T01:07:16.000Z</published>
    <updated>2018-09-16T09:19:54.016Z</updated>
    
    <content type="html"><![CDATA[<p>1.输入workon命令，进入已经设置好的一个虚拟环境。</p><p>2.安装scrapy框架:pip install scrapy</p><p>3.遇到如下报错信息，进入<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy</a> 下载Twisted库的wheel文件<img src="/2018/09/13/scrapydajianxiangmu/图片1.png" alt="你想输入的替代文字"></p><p>4.安装Twisted</p><p>5.执行scrapy startproject 项目名称<br><img src="/2018/09/13/scrapydajianxiangmu/图片2.png" alt="你想输入的替代文字"></p><p>5.using template director：是scrapy内置的一个框架模板<br><img src="/2018/09/13/scrapydajianxiangmu/图片3.png" alt="你想输入的替代文字"></p><p>6.进入到项目文件夹中<br><img src="/2018/09/13/scrapydajianxiangmu/图片4.png" alt="你想输入的替代文字"></p><p>7.爬虫项目文件介绍<br><img src="/2018/09/13/scrapydajianxiangmu/图片5.png" alt="你想输入的替代文字"></p><p>8.通过cmd爬虫项目<br>命令：scrapy  crawl  baidu(爬虫名称)</p><p>9.执行以上命令会报错<br><img src="/2018/09/13/scrapydajianxiangmu/图片6.png" alt="你想输入的替代文字"><br>只需要安装pip install pypiwin32即可解决<br>然后再执行命令：：scrapy  crawl  baidu(爬虫名称)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.输入workon命令，进入已经设置好的一个虚拟环境。&lt;/p&gt;
&lt;p&gt;2.安装scrapy框架:pip install scrapy&lt;/p&gt;
&lt;p&gt;3.遇到如下报错信息，进入&lt;a href=&quot;https://www.lfd.uci.edu/~gohlke/pythonli
      
    
    </summary>
    
    
      <category term="学习心得" scheme="http://www.gaoxiangxiang.cn/tags/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟环境的安装和配置(windows)</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/12/xunihuanjing/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/12/xunihuanjing/</id>
    <published>2018-09-12T14:46:37.000Z</published>
    <updated>2018-09-13T00:54:50.165Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="1-下载virtualenvwrapper-win-包"><a href="#1-下载virtualenvwrapper-win-包" class="headerlink" title="1.下载virtualenvwrapper-win 包"></a>1.下载virtualenvwrapper-win 包</h1><p>在黑窗中输入pip install virtualenvwrapper-win<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Users\Administrator&gt;pip install virtualenvwrapper-win</span><br><span class="line">Requirement already <span class="symbol">satisfied:</span> virtualenvwrapper-win in <span class="symbol">c:</span>\programdata\anaconda3\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (1.2.5)</span></span><br><span class="line">Requirement already <span class="symbol">satisfied:</span> virtualenv in <span class="symbol">c:</span>\programdata\anaconda3\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span>) (16.0.0)</span></span><br></pre></td></tr></table></figure></p><h1 id="2-输入workon命令查看是否可用"><a href="#2-输入workon命令查看是否可用" class="headerlink" title="2.输入workon命令查看是否可用"></a>2.输入workon命令查看是否可用</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pass a name to activate one of the following virtualenvs:</span><br><span class="line">==============================================================================</span><br><span class="line">找不到文件</span><br></pre></td></tr></table></figure><h1 id="3-使用virtualenvwrapper创建虚拟环境"><a href="#3-使用virtualenvwrapper创建虚拟环境" class="headerlink" title="3.使用virtualenvwrapper创建虚拟环境"></a>3.使用virtualenvwrapper创建虚拟环境</h1><p>在黑窗中输入mkvirtualenv py3scrapy  (py3scrapy为虚拟环境名)<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator&gt;mkvirtualenv py4scrapy</span><br><span class="line">Using base prefix 'c:<span class="symbol">\\</span>programdata<span class="symbol">\\</span>anaconda3'</span><br><span class="line">New python executable in D:<span class="symbol">\E</span>nvs<span class="symbol">\p</span>y4scrapy<span class="symbol">\S</span>cripts<span class="symbol">\p</span>ython.exe</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure></p><p>默认放在C:\Users\Administrator\Envs目录中<br>可以修改存放的路径：<br>找到系统环境变量，编辑系统变量,添加WORKON_HOME为变量名,D:\ENVS为变量值<br>运行workon，目录中没有虚拟环境了，因为默认目录已经改变，可以将之前的虚拟环境拷贝到新目录下</p><p>新建一个虚拟环境，完成后自动进入该虚拟环境</p><p>以后再进入虚拟环境，就不需要记住安装路径了直接使用以下命令：<br>列出虚拟环境列表：workon<br>新建虚拟环境：mkvirtualenv [虚拟环境名称]<br>启动/切换虚拟环境：workon [虚拟环境名称]<br>离开虚拟环境：deactivate</p><hr>]]></content>
    
    <summary type="html">
    
      “虚拟环境” 来源于 ShadoWin 虚拟软件所实现的功能。ShadoWin 的工作原理是以专利的实时动态程序行为修饰与模拟算法，直接利用本机的 OS，模拟出自带与本机相容 OS 的虚拟机（Vista 下可模拟 Vista、XP，Windows 7 下则可模拟 Windows 7、Vista、XP），也称为 “虚拟环境”。
    
    </summary>
    
    
      <category term="学习心得" scheme="http://www.gaoxiangxiang.cn/tags/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>proxy_pool</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/12/proxy-pool/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/12/proxy-pool/</id>
    <published>2018-09-12T06:14:35.000Z</published>
    <updated>2018-09-12T06:52:38.967Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="代理IP"><a href="#代理IP" class="headerlink" title="代理IP:"></a>代理IP:</h2><p>1.免费的代理IP,可用IP少,时效性较短,大部分的代理IP可能.<br>2.收费的代理IP,讯代理.<br>3.爬取国外的网站,VPN代理服务器.</p><h2 id="pxory-pool"><a href="#pxory-pool" class="headerlink" title="pxory_pool:"></a>pxory_pool:</h2><p>1.它将国内的代理IP网站都进行了爬取;<br>2.代理IP爬取完毕之后,会进行金策,可用的IP会保存到数据库redis中;<br>3.会定期将数据库中的代理IP拿出来检测,失效的IP从数据库中删除;<br>4.支持扩展</p><p>附上proxy_pool的github链接:<a href="https://github.com/jhao104/proxy_pool" target="_blank" rel="noopener">https://github.com/jhao104/proxy_pool</a></p><hr>]]></content>
    
    <summary type="html">
    
      代理服务器（ProxyServer）是一种重要的服务器安全功能，它的工作主要在开放系统互联 (OSI) 模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接INTERNET（国际互联网）和 Local Area Network（局域网）。
    
    </summary>
    
    
      <category term="代理" scheme="http://www.gaoxiangxiang.cn/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>装了Chorme不用这个扩展,还不如去用IE6</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/06/a/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/06/a/</id>
    <published>2018-09-06T01:40:28.000Z</published>
    <updated>2018-09-12T11:10:26.699Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><p>这年头神器这个词已经烂大街了，但是，油猴的确配得上这个词，如果让我选择 Chrome 浏览器上只能保留一个扩展，那必须是油猴插件！这是一个可以提升上网幸福感的神级工具！<br>说的这么邪乎？那我来告诉你这只油猴子都能干些什么吧。简单粗暴，直接上图！<br>………..<br>好吧,因为没有备案,所以图床还不能用…<br>那就简单来讲讲吧,大致来说能干的事情非常的多,比如能看VIP视频、能下知网论文、磁链在线看、网盘免输密……<br>等等,还有很多你想不到的功能.<br>这么逆天的神器到底是个什么东西？它其实是一个脚本管理器，可以为你的浏览器加载各种各样有趣、实用、脑洞大开的脚本，对你正在访问的指定网站按照你的需求进行修改，从而让你的浏览器前所未有地强大。<br>这款插件除了适用于 Chrome ,还支持 Microsoft Edge，Safari，Opera ，Firefox，以及使用 Chromium 内核的国产浏览器（比如QQ、猎豹、360、百度等），在 <a href="http://tampermonkey.net" target="_blank" rel="noopener">http://tampermonkey.net</a> 这里你可以找到对应的油猴版本下载。我个人比较喜欢用Chrome,所以就以Chrome 为例讲解啦。</p><p>先安装油猴插件，最新版本号是4.4——</p><p>1、可以科学上网的同学建议在线安装，去谷歌商店搜索 Tampermonkey 下载安装。</p><p>2、如果没有科学上网的条件，可以去 <a href="http://www.crx4chrome.com/crx/755/" target="_blank" rel="noopener">www.crx4chrome.com/crx/755/</a> 下载到本地，然后离线安装。顺便提一句，crx4chrome 这个站可以无需科学上网就能下载到最新版本的 Chrome 扩展，建议收藏。</p><p>安装成功之后，你会在 Chrome 的扩展栏看到一个黑色图标，证明油猴已经安装成功。</p><p>安装就这么简单，那这时候是不是就可以使用上边的那些神奇功能呢？</p><p>还不行，安装好油猴插件相当于你手里有了一把枪，还要有子弹才能发挥枪的威力。</p><p>再送你一个丰富的弹药库，<a href="https://greasyfork.org/zh-CN/scripts，长枪短炮，应有尽有，刚才那些功能强大的脚本都来自于这个网站。" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts，长枪短炮，应有尽有，刚才那些功能强大的脚本都来自于这个网站。</a></p><p>油猴上好玩好用的脚本实在是太多了，大家可以去自己慢慢淘，总有一款适合自己.</p><hr>]]></content>
    
    <summary type="html">
    
      插件 (Plug-in,又译外挂) 是一种遵循一定规范的应用程序接口编写出来的程序。其只能运行在程序规定的系统平台下（可能同时支持多个平台），而不能脱离指定的平台单独运行。插件的定位是开发实现原纯净系统平台、应用软件平台不具备的功能的程序
    
    </summary>
    
    
      <category term="福利专区" scheme="http://www.gaoxiangxiang.cn/tags/%E7%A6%8F%E5%88%A9%E4%B8%93%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>scrapy框架自定义pipeline</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/04/test1/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/04/test1/</id>
    <published>2018-09-04T03:31:01.000Z</published>
    <updated>2018-09-12T11:10:41.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义pipeline"><a href="#自定义pipeline" class="headerlink" title="自定义pipeline"></a>自定义pipeline</h2><p>首先,需要我们在pipeline.py文件中自定义.需要注意的是自定义的每一个pipeline必须是一个独立的Python类,也就是继承于object.就可以定义pipeline类,定义自己想要使用的储存方法.</p><a id="more"></a><h2 id="演示保存为csv"><a href="#演示保存为csv" class="headerlink" title="演示保存为csv"></a>演示保存为csv</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NovelSpiderCsvPipeline</span>(<span class="title">object</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>,spider)</span></span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.f=open(<span class="string">'novel,csv'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>,newline=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">self</span>.writer=csv.DictWriter(<span class="keyword">self</span>.f,fieldnames=[<span class="string">"novel_name"</span>,<span class="string">"novel_info"</span>,<span class="string">"novel_type"</span>,<span class="string">"novel_author"</span>])</span><br><span class="line">            <span class="keyword">self</span>.writer.writeheader()</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>,item,spider)</span></span><span class="symbol">:</span></span><br><span class="line">            item_dict=dict(item)</span><br><span class="line">            <span class="keyword">self</span>.writer.writerow(item_dict)</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>,spider)</span></span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.f.close()</span><br></pre></td></tr></table></figure><p>然后在pipeline写好代码之后,不是就完成了,还有一些步骤要做.自定义的pipeline必须在settings中的ITEM_PIPELINES里面启用,否则该pipeline不会生效<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ITEM_PIPELINES</span> = &#123;<span class="string">'NovelSpider.pipelines.NovelSpiderCsvPipeline'</span>: <span class="number">301</span>&#125;</span><br></pre></td></tr></table></figure></p><p>最后运行就可以了</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义pipeline&quot;&gt;&lt;a href=&quot;#自定义pipeline&quot; class=&quot;headerlink&quot; title=&quot;自定义pipeline&quot;&gt;&lt;/a&gt;自定义pipeline&lt;/h2&gt;&lt;p&gt;首先,需要我们在pipeline.py文件中自定义.需要注意的是自定义的每一个pipeline必须是一个独立的Python类,也就是继承于object.就可以定义pipeline类,定义自己想要使用的储存方法.&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习心得" scheme="http://www.gaoxiangxiang.cn/tags/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>博客简介</title>
    <link href="http://www.gaoxiangxiang.cn/2018/09/03/test/"/>
    <id>http://www.gaoxiangxiang.cn/2018/09/03/test/</id>
    <published>2018-09-03T01:40:28.000Z</published>
    <updated>2018-09-12T11:15:40.948Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎光临本博客的所有朋友们!</p><p>这是个普通空间，在这里故事不会被渲染，因为它来源于生活。</p><a id="more"></a><p>以前经常发表一些帖子或者通过聊天软件来表达自己的想法,可是都是零散的和杂乱的.</p><p>现在创建了一个个人博客,我可以把自己以前的和每天激发的一些想法或者感受放在自己的博客上,每次在写文章的时候,可能又会产生新的想法.虽然一些想法一些思考只是些皮毛,没有什么深度,但是当下笔去写的时候每次都会对某个小小的问题有了跟多的一点点思考.生活中每天的一个小小的事情都会引起人们的思考,甚至是和朋友的聊天中一个小小的火花迸发.</p><p>督促自己努力,把一时的想法变成观点,争取在声明中的每天里留下点什么,这也是写博客的目的之一.这也就能督促自己每一天不要浑浑噩噩,时光流逝无痕无声无息,写博客也是在自己的每一天留下了一道浅浅的思考和划痕.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎光临本博客的所有朋友们!&lt;/p&gt;
&lt;p&gt;这是个普通空间，在这里故事不会被渲染，因为它来源于生活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活笔记" scheme="http://www.gaoxiangxiang.cn/tags/%E7%94%9F%E6%B4%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
